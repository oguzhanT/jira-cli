#!/usr/bin/env php
<?php
use OguzhanTogay\JiraCLI\JiraClient;
use Dotenv\Dotenv;
/**
 * Find the autoload file dynamically by checking possible paths.
 *
 * @return string|null The path to the autoload file if found, or null if not found.
 */
function findAutoloadFile(): ?string
{
    // Start from the current directory and move upwards.
    $dir = __DIR__;

    while ($dir !== dirname($dir)) {
        $autoloadPath = $dir . '/vendor/autoload.php';

        if (file_exists($autoloadPath)) {
            return $autoloadPath;
        }

        // Move up one directory level.
        $dir = dirname($dir);
    }

    return null; // Return null if no autoload file is found.
}

// Usage example:
$autoloadFile = findAutoloadFile();
if ($autoloadFile) {
    require_once $autoloadFile;
} else {
    echo 'Autoload not found. Please run "composer install" to generate the autoload file.' . PHP_EOL;
    exit(1);
}
/**
 * Find the .env file dynamically by searching upwards from the given directory.
 *
 * @param string $startDir The directory to start searching from.
 * @return string|null The path to the .env file if found, or null if not found.
 */
function findEnvFile(string $startDir): ?string
{
    $dir = $startDir;

    // Traverse upwards through the directory structure
    while ($dir !== dirname($dir)) {
        $envPath = $dir . '/.env';

        if (file_exists($envPath)) {
            return $envPath;
        }

        // Move up one level
        $dir = dirname($dir);
    }

    return null; // Return null if .env file is not found
}

// Usage example:
$envFile = findEnvFile(__DIR__);

if ($envFile) {
    // Load the .env file using Dotenv
    $dotenv = Dotenv::createImmutable(dirname($envFile));
    $dotenv->load();
} else {
    echo "Error: .env file not found.\n";
    exit(1);
}



$baseUri = $_ENV['JIRA_SERVER'];
$username = $_ENV['JIRA_USERNAME'];
$apiToken = $_ENV['JIRA_API_TOKEN'];

// Validate that required environment variables are set
if (!$baseUri || !$username || !$apiToken) {
    echo "Error: JIRA_SERVER, JIRA_USERNAME, and JIRA_API_TOKEN must be set in the .env file.\n";
    exit(1);
}

$jiraClient = new JiraClient($baseUri, $username, $apiToken);

$options = getopt("p:s::r::", ["project:", "status::", "range::", "id::", "list-projects"]);

// Show usage if no arguments are provided
if ($argc < 2) {
    echo "Usage:\n";
    echo "  -p, --project: Specify the project key (required)\n";
    echo "  -s, --status: Filter issues by status (optional)\n";
    echo "  --range: Specify a range for pagination (e.g., 5-10) (optional)\n";
    echo "  --id: Show details for a specific issue by its ID or key (optional)\n";
    echo "  --list-projects: List all available Jira projects\n";
    exit(0);
}

if (isset($options['list-projects'])) {
    // Show Jira projects
    $projects = $jiraClient->getProjects();
    $jiraClient->listProjects($projects);
    exit(0);
}

if (isset($options['id'])) {
    // Show details for a specific Jira issue by ID or key
    $issueId = $options['id'];
    $issue = $jiraClient->getIssueDetails($issueId);
    $jiraClient->showIssueDetails($issue);
    exit(0);
}

if (!isset($options['p']) && !isset($options['project'])) {
    echo "Error: The project key (-p or --project) is required.\n";
    exit(1);
}

$projectKey = $options['p'] ?? $options['project'];
$status = $options['s'] ?? $options['status'] ?? null;
$range = $options['r'] ?? $options['range'] ?? '0-9';
$startAt = 0;
$maxResults = 10;

if ($range) {
    if (!preg_match('/^\d+-\d+$/', $range)) {
        echo "Error: The range should be in the format 'start-end', e.g., '5-10'.\n";
        exit(1);
    }

    [$start, $end] = explode('-', $range);
    $startAt = (int) $start;
    $maxResults = (int) $end - (int) $start + 1;
}
$jql = "project = {$projectKey}";
if ($status) {
    $jql .= " AND status = '{$status}'";
}
$jql .= " ORDER BY created DESC";
// Get and display Jira issues for the specified project, status, and pagination range
$issues = $jiraClient->getIssuesByProject($projectKey, $status, $startAt, $maxResults);
$jiraClient->listIssues($issues);
