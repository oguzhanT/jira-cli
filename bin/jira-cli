#!/usr/bin/env php
<?php

use OguzhanTogay\JiraCLI\Command\AssignIssueCommand;
use OguzhanTogay\JiraCLI\Command\ConfigureAccountIdCommand;
use OguzhanTogay\JiraCLI\Command\CreateIssueCommand;
use OguzhanTogay\JiraCLI\Command\CreateProjectCommand;
use OguzhanTogay\JiraCLI\Command\ShowUserDetailCommand;
use OguzhanTogay\JiraCLI\Command\ShowWorkLogCommand;
use OguzhanTogay\JiraCLI\JiraClient;
use OguzhanTogay\JiraCLI\Command\ListProjectsCommand;
use OguzhanTogay\JiraCLI\Command\ShowIssueCommand;
use OguzhanTogay\JiraCLI\Command\ListIssuesCommand;
use Symfony\Component\Console\Application;
use Dotenv\Dotenv;


/**
 * Find the autoload file dynamically by checking possible paths.
 *
 * @return string|null The path to the autoload file if found, or null if not found.
 */
function findAutoloadFile(): ?string
{
    // Start from the current directory and move upwards.
    $dir = __DIR__;

    while ($dir !== dirname($dir)) {
        $autoloadPath = $dir . '/vendor/autoload.php';

        if (file_exists($autoloadPath)) {
            return $autoloadPath;
        }

        // Move up one directory level.
        $dir = dirname($dir);
    }

    return null; // Return null if no autoload file is found.
}

// Usage example:
$autoloadFile = findAutoloadFile();
if ($autoloadFile) {
    require_once $autoloadFile;
} else {
    echo 'Autoload not found. Please run "composer install" to generate the autoload file.' . PHP_EOL;
    exit(1);
}
/**
 * Find the .env file dynamically by searching upwards from the given directory.
 *
 * @param string $startDir The directory to start searching from.
 * @return string|null The path to the .env file if found, or null if not found.
 */
function findEnvFile(string $startDir): ?string
{
    $dir = $startDir;

    // Traverse upwards through the directory structure
    while ($dir !== dirname($dir)) {
        $envPath = $dir . '/.env';

        if (file_exists($envPath)) {
            return $envPath;
        }

        // Move up one level
        $dir = dirname($dir);
    }

    return null; // Return null if .env file is not found
}

// Usage example:
$envFile = findEnvFile(__DIR__);


// Load environment variables
$envFile = findEnvFile(__DIR__);
if ($envFile) {
    $dotenv = Dotenv::createImmutable(dirname($envFile));
    $dotenv->load();
} else {
    echo "Error: .env file not found.\n";
    exit(1);
}

// Validate environment variables
$baseUri = $_ENV['JIRA_SERVER'];
$username = $_ENV['JIRA_USERNAME'];
$apiToken = $_ENV['JIRA_API_TOKEN'];
if (!$baseUri || !$username || !$apiToken) {
    echo "Error: JIRA_SERVER, JIRA_USERNAME, and JIRA_API_TOKEN must be set in the .env file.\n";
    exit(1);
}

// Instantiate JiraClient
$jiraClient = new JiraClient($baseUri, $username, $apiToken);

// Set up Symfony Console application
$application = new Application('Jira CLI Tool', '1.2.0');

// Add Commands
$application->add(new ListProjectsCommand($jiraClient));
$application->add(new ShowIssueCommand($jiraClient));
$application->add(new ListIssuesCommand($jiraClient));
$application->add(new CreateIssueCommand($jiraClient));
$application->add(new CreateProjectCommand($jiraClient));
$application->add(new AssignIssueCommand($jiraClient));
$application->add(new ShowWorkLogCommand($jiraClient));
$application->add(new ShowUserDetailCommand($jiraClient));
$application->add(new ConfigureAccountIdCommand($jiraClient));
// Run application
try {
    $application->run();
} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "\n";
    exit(1);
}
